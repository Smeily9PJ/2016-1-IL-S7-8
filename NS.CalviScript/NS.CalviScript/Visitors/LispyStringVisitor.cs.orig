<<<<<<< HEAD
﻿using NS.CalviScript.Visitors;
using System;
=======
﻿using System;
>>>>>>> Base/parser-enhancement
using System.Diagnostics;

namespace NS.CalviScript
{
    public class LispyStringVisitor : IVisitor
    {
        public void Visit( BinaryExpr expr )
        {
            expr.LeftExpr.Accept( this );
            string left = Result;
            expr.RightExpr.Accept( this );
            string right = Result;
            Result = string.Format( "[{0} {1} {2}]",
<<<<<<< HEAD
                TokenTypeHelper.TokenTypeToString( expr.Type ),
=======
                TokenTypeHelpers.TokenTypeToString( expr.Type ),
>>>>>>> Base/parser-enhancement
                left,
                right );
        }

        public void Visit( ConstantExpr expr )
        {
            Result = expr.Value.ToString();
        }

        public void Visit( ErrorExpr expr )
        {
            Result = string.Format( "[Error {0}]", expr.Message );
        }

        public string Result { get; private set; }
    }

<<<<<<< HEAD
    public class GenericLipsyStringVisitor : IVisitor<string>
    {
        public string Visit(ErrorExpr expr)
        {
            return string.Format("[Error {0}]" , expr.Message);
        }

        public string Visit(ConstantExpr expr)
=======
    public class GenericLispyStringVisitor : IVisitor<string>
    {
        public string Visit( ErrorExpr expr )
        {
            return string.Format( "[Error {0}]", expr.Message );
        }

        public string Visit( ConstantExpr expr )
>>>>>>> Base/parser-enhancement
        {
            return expr.Value.ToString();
        }

<<<<<<< HEAD
        public string Visit(BinaryExpr expr)
        {
            return string.Format("[{0} {1} {2}]",
                     TokenTypeHelper.TokenTypeToString(expr.type),
                     expr.LeftExpr.Accept(this),
                     expr.RightExpr.Accept(this));
=======
        public string Visit( BinaryExpr expr )
        {
            return string.Format( "[{0} {1} {2}]",
                TokenTypeHelpers.TokenTypeToString( expr.Type ),
                expr.LeftExpr.Accept( this ),
                expr.RightExpr.Accept( this ) );
>>>>>>> Base/parser-enhancement
        }
    }
}
